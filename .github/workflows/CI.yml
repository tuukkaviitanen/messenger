# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  build:

    runs-on: ubuntu-latest

    services:

      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 6379 on service container to the host
          - 6379:6379

    env:
      POSTGRES_URL_TEST: postgres://postgres:postgres@localhost:5432/postgres
      SECRET: test_secret
      REDIS_URL: redis://localhost:6379

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    defaults:
      run:
        working-directory: ./server

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install backend dependencies
      run: npm ci

    - name: Run backend linter
      run: npm run lint

    - name: Build backend
      run: npm run build

    - name: Run backend tests
      run: npm test

    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./client

    - name: Run frontend linter
      run: npm run lint
      working-directory: ./client

    - name: Build frontend
      run: npm run build
      working-directory: ./client

    - name: Run end-to-end tests
      uses: cypress-io/github-action@v6
      env:
        CYPRESS_BASE_URL: http://localhost:3000
      with:
        command: npm run test:e2e
        start: npm run start:test
        wait-on: http://localhost:3000
        working-directory: ./server

  tag_release:
    needs: ["build"]
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    outputs:
      version: ${{steps.tagging.outputs.new_tag}}
    steps:
      - uses: actions/checkout@v3

      - name: Bump version and push tag
        id: tagging
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch


  deployment:
    needs: [build, tag_release]
    runs-on: ubuntu-20.04
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
      - name: Wait for Render Deployment
        uses: bounceapp/render-action@0.7.1
        with:
          render-token: ${{ secrets.RENDER_API_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          service-id: ${{ secrets.RENDER_SERVICE_ID }}

  publish_docker_image:
    if: ${{ github.event_name == 'push' }}
    needs: [build, tag_release, deployment]
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    env:
      # Use docker.io for Docker Hub if empty
      REGISTRY: ghcr.io
      # github.repository as <account>/<repo>
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          tags: |
            '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.tag_release.outputs.version }}'
            '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
          push: true
